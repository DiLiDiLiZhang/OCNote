
// MARK: mark - GitHub相关
touch README.md //新建一个记录提交操作的文档
git init //初始化本地仓库
git add README.md //添加
git add *  //加入所有项目
git status //检查状态 如果都是绿的 证明成功
git commit -m "first commit"//提交到要地仓库，并写一些注释
git remote add origin git@github.com:youname/Test.git //连接远程仓库并建了一个名叫：origin的别名
git push -u origin master //将本地仓库的东西提交到地址是origin的地址，master分支下

// Object-C的一些基础
1.OC是一门动态运行时语言
    静态、动态是相对的，这里动态语言指的是不需要在编译时确定所有的东西，它会将一些工作放在代码运行时才处理而并非编译时，有很多类和成员变量在我们编译的时
    是不知道的，而在运行时，我们所编写的代码会转换成完整的确定的代码运行，而且在运行时还可以动态的添加变量、方法和类。因此，编译器是不够的，我们还需要一
    个运行时系统(Runtime system)来处理编译后的代码。
    Runtime 基本是用 C 和汇编写的，由此可见苹果为了动态系统的高效而做出的努力。苹果和 GNU 各自维护一个开源的 Runtime 版本，这两个版本之间都在努力保
    持一致。

    OC的动态特性表现为了三个方面：动态类型、动态绑定、动态加载

（1）动态类型

    动态类型，说简单点就是id类型。动态类型是跟静态类型相对的。像内置的明确的基本类型都属于静态类型(int、NSString等)。静态类型在 编译的时候就能被识别
    出来。所以，若程序发生了类型不对应，编译器就会发出警告。而动态类型就编译器编译的时候是不能被识别的，要等到运行时(run time)，即程序运行的时候才会根
    据语境来识别。所以这里面就有两个概念要分清：编译时跟运行时。
    id obj = someInstance;
    if ([obj isKindOfClass:someClass]) {
        someClass *classSpecifiedInstance = (someClass *)obj;
    }

（2）动态绑定
    动态绑定(dynamic binding)貌似比较难记忆，但事实上很简单，只需记住关键词@selector/SEL即可。先来看看“函数”，对于其他一些静态语言，比如 c++,一般
    在编译的时候就已经将将要调用的函数的函数签名都告诉编译器了。静态的，不能改变。而在OC中，其实是没有函数的概念的，我们叫“消息机 制”，所谓的函数调用就
    是给对象发送一条消息。这时，动态绑定的特性就来了。OC可以先跳过编译，到运行的时候才动态地添加函数调用，在运行时才决定要调 用什么方法，需要传什么参数
    进去。这就是动态绑定，要实现他就必须用SEL变量绑定一个方法。最终形成的这个SEL变量就代表一个方法的引用。这里要注意 一点：SEL并不是C里面的函数指针，
    虽然很像，但真心不是函数指针。SEL变量只是一个整数，他是该方法的ID，@selector()就是取类方法的编号。以前的函数调用，是根据函数名，也就是 字符串去查
    找函数体。但现在，我们是根据一个ID整数来查找方法，整数的查找字自然要比字符串的查找快得多！所以，动态绑定的特定不仅方便，而且效率更 高。

    由于OC的动态特性，在OC中其实很少提及“函数”的概念，传统的函数一般在编译时就已经把参数信息和函数实现打包到编译后的源码中了，而在OC中最常使 用的是消息
    机制。调用一个实例的方法，所做的是向该实例的指针发送消息，实例在收到消息后，从自身的实现中寻找响应这条消息的方法

（3）动态加载
    根据需求加载所需要的资源，这点很容易理解，对于iOS开发来说，基本就是根据不同的机型做适配。最经典的例子就是在Retina设备上加载@2x的图片，而在老一些的普
    通屏设备上加载原图。
    参考：
    ①https://jingyan.baidu.com/article/636f38bb4f08f9d6b846103f.html
    ②https://www.cnblogs.com/dxb123456/p/5525343.html
    ③runtime https://www.cnblogs.com/ioshe/p/5489086.html
